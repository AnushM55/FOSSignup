const express = require("express");
const fs = require("fs");
const { google } = require("googleapis");
const cors = require("cors");
const csv = require('csv-parser');
const path = require('path');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;

const app = express();
app.use(express.json());
app.use(cors());

const uploadCSVToDrive = async (csvPath) => {
  const auth = new google.auth.GoogleAuth({
    keyFile: "D:/event-registration/backend/fosseventsregistration-f1976f2b97c3.json",
    scopes: ["https://www.googleapis.com/auth/drive.file"],
  });

  const driveService = google.drive({ version: "v3", auth });
  const fileName = "event_registration.csv"; // Name of the file on Google Drive

  try {
    // Read the folder ID from the file
    const folderId = JSON.parse(fs.readFileSync(driveFolderPath)).folderId;
    if (!folderId) {
      throw new Error("Drive folder ID is not set");
    }

    // Check if the file already exists
    const response = await driveService.files.list({
      q: `name='${fileName}' and '${folderId}' in parents`,
      fields: "files(id, name)",
    });

    const fileExists = response.data.files.length > 0;
    let fileId;

    if (fileExists) {
      // Update the existing file
      fileId = response.data.files[0].id;
      await driveService.files.update({
        fileId: fileId,
        media: {
          mimeType: "text/csv",
          body: fs.createReadStream(csvPath),
        },
      });
      console.log("File updated on Google Drive!");
    } else {
      // Create a new file
      const fileMetadata = {
        name: fileName,
        parents: [folderId],
      };

      const media = {
        mimeType: "text/csv",
        body: fs.createReadStream(csvPath),
      };

      const file = await driveService.files.create({
        resource: fileMetadata,
        media: media,
        fields: "id",
      });

      fileId = file.data.id;
      console.log("File uploaded to Google Drive!");
    }

    return fileId;
  } catch (error) {
    console.error("Error uploading/updating file on Google Drive:", error);
    throw error;
  }
};


const driveFolderPath = path.join(__dirname, "driveFolder.json");

// Initialize drive folder ID with default value if the file doesn't exist
if (!fs.existsSync(driveFolderPath)) {
  fs.writeFileSync(driveFolderPath, JSON.stringify({ folderId: "" }));
}

// Endpoint to get drive folder ID
app.get("/drive-folder-id", (req, res) => {
  try {
    const folderId = JSON.parse(fs.readFileSync(driveFolderPath));
    res.json(folderId);
  } catch (error) {
    console.error("Error reading drive folder ID:", error);
    res.status(500).json({ error: "Failed to read drive folder ID" });
  }
});

// Endpoint to update drive folder ID
app.post("/update-drive-folder-id", (req, res) => {
  try {
    const { folderId } = req.body;
    fs.writeFileSync(driveFolderPath, JSON.stringify({ folderId }));
    res.json({ message: "Drive folder ID updated successfully" });
  } catch (error) {
    console.error("Error updating drive folder ID:", error);
    res.status(500).json({ error: "Failed to update drive folder ID" });
  }
});


// Path to the form fields configuration file
const formFieldsPath = path.join(__dirname, "formFields.json");
const masterCsvPath = "event_registrations_all.csv";

// Initialize form fields with default values if the file doesn't exist
if (!fs.existsSync(formFieldsPath)) {
  fs.writeFileSync(
    formFieldsPath,
    JSON.stringify([
      { label: "Name", key: "name", type: "text" },
      { label: "Email", key: "email", type: "email" },
      { label: "Phone", key: "phone", type: "tel" },
    ])
  );
}

// Get form fields
const getFormFields = () => {
  try {
    return JSON.parse(fs.readFileSync(formFieldsPath));
  } catch (error) {
    console.error("Error reading form fields:", error);
    return [
      { label: "Name", key: "name", type: "text" },
      { label: "Email", key: "email", type: "email" },
      { label: "Phone", key: "phone", type: "tel" },
    ];
  }
};

// Backend routes
app.get("/steps", (req, res) => {
  const steps = require("./steps.js"); // Import the steps configuration
  res.json(steps); // Send the steps as JSON
});

// Endpoint to get form fields
app.get("/form-fields", (req, res) => {
  try {
    const formFields = JSON.parse(fs.readFileSync(formFieldsPath));
    res.json(formFields);
  } catch (error) {
    console.error("Error reading form fields:", error);
    res.status(500).json({ error: "Failed to read form fields" });
  }
});

// Function to read existing CSV data
const readExistingRegistrations = async () => {
  if (!fs.existsSync(masterCsvPath)) {
    return [];
  }

  return new Promise((resolve, reject) => {
    const registrations = [];
    fs.createReadStream(masterCsvPath)
      .pipe(csv())
      .on('data', (data) => registrations.push(data))
      .on('end', () => resolve(registrations))
      .on('error', (error) => reject(error));
  });
};

// Function to completely rebuild the CSV file with current fields
const rebuildCSV = async () => {
  try {
    // Get current form fields
    const formFields = getFormFields();
    
    // Create headers array for CSV
    const headers = [
      ...formFields.map(field => ({
        id: field.key, 
        title: field.label
      })),
      { id: 'date', title: 'Date' }
    ];
    
    // Read existing registrations if any
    let existingData = [];
    try {
      existingData = await readExistingRegistrations();
    } catch (error) {
      console.error("Error reading existing registrations:", error);
    }
    
    // Map existing data to include all current fields
    const mappedData = existingData.map(entry => {
      const newRecord = {};
      
      // Add all current form fields (with empty values for missing fields)
      formFields.forEach(field => {
        // Try to find the value in existing data (handle column name variations)
        newRecord[field.key] = entry[field.key] || 
                             entry[field.label] || 
                             entry[field.label.toLowerCase()] || 
                             '';
      });
      
      // Add the date field
      newRecord.date = entry.Date || entry.date || '';
      
      return newRecord;
    });
    
    // Create CSV writer with the complete set of headers
    const csvWriter = createCsvWriter({
      path: masterCsvPath,
      header: headers
    });
    
    // Write all data with new schema
    await csvWriter.writeRecords(mappedData);
    console.log('CSV file rebuilt successfully with new schema');
    
    // Upload to Google Drive
    await uploadCSVToDrive(masterCsvPath);
    
  } catch (error) {
    console.error("Error rebuilding CSV:", error);
  }
};

// Endpoint to update form fields
app.post("/update-form-fields", async (req, res) => {
  try {
    const newFields = req.body;
    fs.writeFileSync(formFieldsPath, JSON.stringify(newFields));
    
    // Completely rebuild the CSV with the new field structure
    await rebuildCSV();
    
    res.json({ message: "Form fields updated successfully and CSV schema updated" });
  } catch (error) {
    console.error("Error updating form fields:", error);
    res.status(500).json({ error: "Failed to update form fields" });
  }
});

// Function to add a new registration to the CSV
const addRegistrationToCSV = async (formData) => {
  try {
    const formFields = getFormFields();
    const timestamp = new Date().toISOString();
    
    // Create a new record object with all fields
    const record = {};
    formFields.forEach(field => {
      record[field.key] = formData[field.key] || '';
    });
    record.date = timestamp;
    
    // Check if CSV exists and create headers if not
    const csvExists = fs.existsSync(masterCsvPath);
    
    // Get headers (all current form fields + date)
    const headers = [
      ...formFields.map(field => ({
        id: field.key, 
        title: field.label
      })),
      { id: 'date', title: 'Date' }
    ];
    
    // Create CSV writer
    const csvWriter = createCsvWriter({
      path: masterCsvPath,
      header: headers,
      append: csvExists
    });
    
    // Write the record
    await csvWriter.writeRecords([record]);
    console.log('Registration added to CSV');
    
    // Upload to Google Drive
    await uploadCSVToDrive(masterCsvPath);
    
    return true;
  } catch (error) {
    console.error("Error adding registration to CSV:", error);
    return false;
  }
};

// Upload endpoint
app.post("/upload", async (req, res) => {
  try {
    // Add registration to CSV
    const success = await addRegistrationToCSV(req.body);
    
    if (success) {
      res.json({ message: "Registration submitted successfully" });
    } else {
      res.status(500).json({ error: "Failed to save registration" });
    }
  } catch (error) {
    console.error("Error in upload:", error);
    res.status(500).json({ error: error.message });
  }
});

// Route to get admin credentials from CSV
app.get('/admins', (req, res) => {
  const results = [];
  
  // Path to your admins.csv file
  const csvPath = path.join(__dirname, 'admins.csv');
  
  // Check if file exists
  if (!fs.existsSync(csvPath)) {
    return res.status(404).json({ error: 'Admin file not found' });
  }
  
  fs.createReadStream(csvPath)
    .pipe(csv())
    .on('data', (data) => results.push(data))
    .on('end', () => {
      res.json(results);
    })
    .on('error', (error) => {
      console.error('Error reading admin CSV:', error);
      res.status(500).json({ error: 'Failed to read admin data' });
    });
});

// Route to get all registrations
app.get('/registrations', (req, res) => {
  if (!fs.existsSync(masterCsvPath)) {
    return res.json([]); // Return empty array if no registrations yet
  }
  
  const results = [];
  fs.createReadStream(masterCsvPath)
    .pipe(csv())
    .on('data', (data) => results.push(data))
    .on('end', () => {
      res.json(results);
    })
    .on('error', (error) => {
      console.error('Error reading registrations CSV:', error);
      res.status(500).json({ error: 'Failed to read registration data' });
    });
});

// New endpoint to manually rebuild CSV (useful for fixing existing data)
app.post('/rebuild-csv', async (req, res) => {
  try {
    await rebuildCSV();
    res.json({ message: "CSV file rebuilt successfully" });
  } catch (error) {
    console.error("Error rebuilding CSV:", error);
    res.status(500).json({ error: "Failed to rebuild CSV" });
  }
});

app.listen(5000, () => console.log("Server running on port 5000"));